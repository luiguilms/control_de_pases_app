This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repomix on: 2025-04-03T19:49:23.950Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

================================================================
Directory Structure
================================================================
.gitignore
compare.html
compare.js
index.html
main.js
package.json
renderer.js
styles/styles-compare.css
styles/styles-login.css

================================================================
Files
================================================================

================
File: .gitignore
================
/node_modules
/.env

================
File: compare.html
================
<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Comparar C√≥digo</title>
    <link rel="stylesheet" href="styles/styles-compare.css">
</head>
<body>
    <h2>Comparar C√≥digo de Oracle</h2>
    
    <div class="compare-container">
        <div class="form-group">
            <label for="fileInput">Archivo:</label>
            <input type="file" id="fileInput">
        </div>

        <div class="form-group">
            <label for="schemaInput">Esquema:</label>
            <input type="text" id="schemaInput" placeholder="Ej: USUARIO_X">
        </div>

        <div class="form-group">
            <label for="objectType">Tipo:</label>
            <select id="objectType">
                <option value="PACKAGE">Package</option>
                <option value="FUNCTION">Function</option>
                <option value="PROCEDURE">Procedure</option>
            </select>
        </div>

        <div class="form-group">
            <label for="objectInput">Nombre:</label>
            <input type="text" id="objectInput" placeholder="Ej: MI_PROCEDIMIENTO">
        </div>

        <button id="compareButton">Comparar</button>
        <div id="loader" class="loader"></div>
    </div>

    <div class="result-container">
        <div class="result-header">
            <h3 class="result-title">Resultados de la Comparaci√≥n</h3>
            <div class="diff-controls">
                <div class="diff-toggle">
                    <input type="checkbox" id="showOnlyDiff" checked>
                    <label for="showOnlyDiff">Solo mostrar diferencias</label>
                </div>
            </div>
        </div>
        
        <div id="notification" class="notification" style="display: none;"></div>
        <div id="result-summary" class="result-summary"></div>
        
        <div class="side-by-side">
            <div class="code-panel">
                <div class="panel-header">Base de Datos</div>
                <pre id="db-code" class="code-content"></pre>
            </div>
            
            <div class="code-panel">
                <div class="panel-header">Archivo Local</div>
                <pre id="file-code" class="code-content"></pre>
            </div>
        </div>
    </div>

    <script src="compare.js"></script>
</body>
</html>

================
File: compare.js
================
const { ipcRenderer } = require('electron');

// Mostrar/ocultar el indicador de carga
function toggleLoader(show) {
    document.getElementById('loader').style.display = show ? 'block' : 'none';
}

// Mostrar notificaci√≥n
function showNotification(message, isError = false) {
    const notification = document.getElementById('notification');
    notification.textContent = message;
    notification.className = `notification ${isError ? 'error' : 'success'}`;
    notification.style.display = 'block';
    
    // Ocultar la notificaci√≥n despu√©s de 5 segundos
    setTimeout(() => {
        notification.style.display = 'none';
    }, 5000);
}

// Funci√≥n para mostrar el c√≥digo en los paneles
function displayCodeSideBySide(dbCode, fileCode, differences, options = {}) {
    const dbCodeElement = document.getElementById('db-code');
    const fileCodeElement = document.getElementById('file-code');
    const resultSummary = document.getElementById('result-summary');
    
    // Limpiar contenido anterior
    dbCodeElement.innerHTML = '';
    fileCodeElement.innerHTML = '';
    
    // Comprobar si hay diferencias
    let hasDifferences = differences.some(part => part.added || part.removed);
    
    // Mostrar resumen
    if (hasDifferences) {
        resultSummary.innerHTML = '<span style="vertical-align: middle;">üìå Se encontraron diferencias entre los c√≥digos.</span>';
    } else {
        resultSummary.innerHTML = '<span style="vertical-align: middle;">‚úÖ Los archivos son completamente iguales.</span>';
        showNotification('Los archivos son completamente iguales.');
    }
    
    // A√±adir informaci√≥n sobre la estructura del package si est√° disponible
    if (options.specCodePresent || options.bodyCodePresent) {
        let packageInfoText = '';
        if (options.specCodePresent && options.bodyCodePresent) {
            packageInfoText = 'El objeto contiene tanto PACKAGE como PACKAGE BODY.';
        } else if (options.specCodePresent) {
            packageInfoText = 'El objeto contiene solo PACKAGE (sin BODY).';
        } else if (options.bodyCodePresent) {
            packageInfoText = 'El objeto contiene solo PACKAGE BODY (sin especificaci√≥n).';
        }
        
        if (packageInfoText) {
            const infoElement = document.createElement('div');
            infoElement.className = 'package-info';
            infoElement.textContent = packageInfoText;
            resultSummary.parentNode.insertBefore(infoElement, resultSummary.nextSibling);
        }
    }
    
    // Preparar las l√≠neas para cada panel
    let dbLines = [];
    let fileLines = [];
    
    // Procesar diferencias
    differences.forEach(part => {
        if (part.added) {
            // Este c√≥digo solo est√° en el archivo
            // Preservamos exactamente el formato original, incluidos espacios y saltos de l√≠nea
            const lines = part.value.split('\n');
            lines.forEach((line, index) => {
                const lineHtml = line.replace(/\s/g, function(match) {
                    if (match === ' ') return '&nbsp;';
                    if (match === '\t') return '&nbsp;&nbsp;&nbsp;&nbsp;';
                    return match;
                });
                
                // Si no es la √∫ltima l√≠nea del part o el part no termina con \n, a√±adimos nuestro propio \n
                const needsLineBreak = index < lines.length - 1 || (part.value.endsWith('\n') && index === lines.length - 1);
                
                fileLines.push(`<span class="added"><span class="diff-marker">+</span>${lineHtml || '&nbsp;'}</span>${needsLineBreak ? '\n' : ''}`);
            });
        } else if (part.removed) {
            // Este c√≥digo solo est√° en la BD
            // Preservamos exactamente el formato original, incluidos espacios y saltos de l√≠nea
            const lines = part.value.split('\n');
            lines.forEach((line, index) => {
                const lineHtml = line.replace(/\s/g, function(match) {
                    if (match === ' ') return '&nbsp;';
                    if (match === '\t') return '&nbsp;&nbsp;&nbsp;&nbsp;';
                    return match;
                });
                
                // Si no es la √∫ltima l√≠nea del part o el part no termina con \n, a√±adimos nuestro propio \n
                const needsLineBreak = index < lines.length - 1 || (part.value.endsWith('\n') && index === lines.length - 1);
                
                dbLines.push(`<span class="removed"><span class="diff-marker">-</span>${lineHtml || '&nbsp;'}</span>${needsLineBreak ? '\n' : ''}`);
            });
        } else {
            // C√≥digo com√∫n
            // Preservamos exactamente el formato original, incluidos espacios y saltos de l√≠nea
            const lines = part.value.split('\n');
            lines.forEach((line, index) => {
                const lineHtml = line.replace(/\s/g, function(match) {
                    if (match === ' ') return '&nbsp;';
                    if (match === '\t') return '&nbsp;&nbsp;&nbsp;&nbsp;';
                    return match;
                });
                
                // Si no es la √∫ltima l√≠nea del part o el part no termina con \n, a√±adimos nuestro propio \n
                const needsLineBreak = index < lines.length - 1 || (part.value.endsWith('\n') && index === lines.length - 1);
                
                // Usar una l√≠nea vac√≠a representada como un espacio no rompible en lugar de cadena vac√≠a
                const displayHtml = lineHtml || '&nbsp;';
                
                dbLines.push(`<span class="unchanged">${displayHtml}</span>${needsLineBreak ? '\n' : ''}`);
                fileLines.push(`<span class="unchanged">${displayHtml}</span>${needsLineBreak ? '\n' : ''}`);
            });
        }
    });
    
    // Mostrar el c√≥digo en los paneles
    dbCodeElement.innerHTML = dbLines.join('');
    fileCodeElement.innerHTML = fileLines.join('');
    
    // Sincronizar scroll entre paneles
    synchronizeScroll();
}

// Funci√≥n para sincronizar el scroll entre los paneles de c√≥digo
function synchronizeScroll() {
    const dbCodeElement = document.getElementById('db-code');
    const fileCodeElement = document.getElementById('file-code');
    
    dbCodeElement.addEventListener('scroll', () => {
        fileCodeElement.scrollTop = dbCodeElement.scrollTop;
        fileCodeElement.scrollLeft = dbCodeElement.scrollLeft;
    });
    
    fileCodeElement.addEventListener('scroll', () => {
        dbCodeElement.scrollTop = fileCodeElement.scrollTop;
        dbCodeElement.scrollLeft = fileCodeElement.scrollLeft;
    });
}

// Enviar solicitud de comparaci√≥n
document.getElementById('compareButton').addEventListener('click', () => {
    const fileInput = document.getElementById('fileInput').files[0];
    const schema = document.getElementById('schemaInput').value.trim();
    const objectType = document.getElementById('objectType').value;
    const objectName = document.getElementById('objectInput').value.trim();

    if (!schema || !objectName) {
        showNotification("Debes ingresar el esquema y el nombre del objeto.", true);
        return;
    }

    if (!fileInput) {
        showNotification("Debes seleccionar un archivo para comparar.", true);
        return;
    }

    // Mostrar el indicador de carga
    toggleLoader(true);
    
    // Limpiar resultados anteriores
    document.getElementById('db-code').innerHTML = '';
    document.getElementById('file-code').innerHTML = '';
    document.getElementById('result-summary').textContent = '';
    
    const reader = new FileReader();
    reader.onload = function (event) {
        ipcRenderer.send('compare-code', {
            fileContent: event.target.result,
            schema,
            objectType,
            objectName
        });
    };
    reader.onerror = function() {
        toggleLoader(false);
        showNotification("Error al leer el archivo.", true);
    };
    reader.readAsText(fileInput);
});

// Mostrar resultado de la comparaci√≥n
ipcRenderer.on('compare-response', (event, response) => {
    // Ocultar el indicador de carga
    toggleLoader(false);
    
    try {
        // Verificar si la respuesta es un error
        if (typeof response === 'string' && response.startsWith('Error')) {
            showNotification(response, true);
            return;
        }
        
        // Parsear la respuesta si est√° en formato JSON
        let dbCode, fileContent, differences, options = {};
        
        try {
            const parsedResponse = JSON.parse(response);
            dbCode = parsedResponse.dbCode;
            fileContent = parsedResponse.fileContent;
            differences = parsedResponse.differences;
            
            // Extraer informaci√≥n adicional si est√° disponible
            if ('specCodePresent' in parsedResponse) {
                options.specCodePresent = parsedResponse.specCodePresent;
            }
            if ('bodyCodePresent' in parsedResponse) {
                options.bodyCodePresent = parsedResponse.bodyCodePresent;
            }
        } catch (e) {
            // Si no se puede parsear como JSON, asumimos que es la respuesta anterior
            console.log("Formato de respuesta anterior, procesando...");
            
            // Asignar un mensaje predeterminado si response es un string (formato antiguo)
            if (typeof response === 'string') {
                document.getElementById('result-summary').textContent = 
                    response.includes('completamente iguales') 
                        ? '‚úÖ Los archivos son completamente iguales.'
                        : 'üìå Se encontraron diferencias entre los c√≥digos.';
                
                // Mostrar el HTML recibido directamente (compatibilidad con formato antiguo)
                document.getElementById('db-code').innerHTML = response;
                document.getElementById('file-code').innerHTML = '';
                return;
            }
        }
        
        // Mostrar la comparaci√≥n lado a lado
        if (differences) {
            displayCodeSideBySide(dbCode, fileContent, differences, options);
        }
        
    } catch (error) {
        console.error('Error al procesar la respuesta:', error);
        showNotification('Error al procesar la respuesta: ' + error.message, true);
    }
});

// Filtrar para mostrar solo diferencias o todo el c√≥digo
document.getElementById('showOnlyDiff').addEventListener('change', function() {
    const showOnlyDiff = this.checked;
    const unchangedElements = document.querySelectorAll('.unchanged');
    
    unchangedElements.forEach(element => {
        // Comprobamos si el elemento est√° dentro de un span que tiene contenido
        const hasText = element.textContent.trim() !== '';
        
        // Solo ocultamos elementos que tienen contenido
        if (hasText) {
            element.style.display = showOnlyDiff ? 'none' : 'block';
        }
    });
});

================
File: index.html
================
<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Login Oracle</title>
    <link rel="stylesheet" href="styles/styles-login.css">
</head>
<body>
    <div class="login-container">
        <h2>Login Oracle</h2>
        <form id="login-form">
            <label for="connectionSelect">Selecciona la conexi√≥n:</label>
            <select id="connectionSelect">
                <option value="DESA1">DESA1</option>
                <option value="DESA2">DESA2</option>
                <option value="DESA3">DESA3</option>
                <option value="DESA4">DESA4</option>
                <option value="ARQUI">ARQUI</option>
            </select>

            <label for="username">Usuario:</label>
            <input type="text" id="username" placeholder="Usuario Oracle" required>
            
            <label for="password">Contrase√±a:</label>
            <input type="password" id="password" placeholder="Contrase√±a" required>
            
            <button type="submit">Conectar</button>
        </form>
        <div id="message" class="notification"></div>
    </div>
    <script src="renderer.js"></script>
</body>
</html>

================
File: main.js
================
const { app, BrowserWindow, ipcMain } = require('electron');
const path = require('path');
const oracledb = require('oracledb');
require('dotenv').config(); // Cargar variables de entorno
const { diffLines } = require('diff'); // Importamos la librer√≠a de comparaci√≥n

let mainWindow;
let userSession = null; // Guardar√° la sesi√≥n del usuario autenticado


app.whenReady().then(() => {
    mainWindow = new BrowserWindow({
        width: 800,
        height: 600,
        webPreferences: {
            nodeIntegration: true,
            contextIsolation: false
        }
    });

    // Maximizar la ventana al iniciar
    mainWindow.maximize();

    mainWindow.loadFile('index.html');
});

ipcMain.on('login-attempt', async (event, credentials) => {
    try {
        // Obtener la cadena de conexi√≥n desde .env
        const connectionString = process.env[credentials.selectedConnection];

        if (!connectionString) {
            event.reply('login-response', 'Error: Conexi√≥n no v√°lida.');
            return;
        }

        // Intentar la conexi√≥n con la cadena obtenida
        const connection = await oracledb.getConnection({
            user: credentials.username,
            password: credentials.password,
            connectionString: connectionString
        });

        // Guardar la sesi√≥n del usuario autenticado
        userSession = {
            user: credentials.username,
            password: credentials.password,
            connectionString: connectionString
        };

        event.reply('login-response', 'Conexi√≥n exitosa');
        await connection.close();
    } catch (error) {
        event.reply('login-response', `Error: ${error.message}`);
    }
});

ipcMain.on('compare-code', async (event, { fileContent, schema, objectType, objectName }) => {
    if (!userSession) {
        event.reply('compare-response', 'Error: No hay usuario autenticado.');
        return;
    }

    try {
        const connection = await oracledb.getConnection(userSession);

        let dbCode = '';
        let specCode = '';
        let bodyCode = '';

        // Consulta mejorada para extraer PACKAGE y PACKAGE BODY en formato exacto
        if (objectType === 'PACKAGE') {
            // Consulta mejorada para extraer el c√≥digo exactamente como est√° almacenado
            // La consulta ahora obtiene TEXT directamente en el orden correcto
            let result = await connection.execute(
                `SELECT TYPE, LINE, TEXT
                 FROM ALL_SOURCE 
                 WHERE OWNER = :schema 
                 AND NAME = :objectName 
                 AND TYPE IN ('PACKAGE', 'PACKAGE BODY')
                 ORDER BY TYPE, LINE`,
                { schema, objectName },
                { fetchInfo: { TEXT: { type: oracledb.STRING } } }
            );

            // Organizar el resultado en dos partes: spec y body
            if (result.rows.length > 0) {
                // Separar el c√≥digo del spec y el body
                let currentType = null;
                let currentCode = [];
                
                // Procesar cada l√≠nea en el orden correcto
                for (const row of result.rows) {
                    const type = row[0]; // 'PACKAGE' o 'PACKAGE BODY'
                    const text = row[2]; // El texto de la l√≠nea
                    
                    // Si cambiamos de tipo, guardamos el c√≥digo anterior
                    if (type !== currentType) {
                        if (currentType === 'PACKAGE') {
                            specCode = currentCode.join('');
                        } else if (currentType === 'PACKAGE BODY') {
                            bodyCode = currentCode.join('');
                        }
                        currentType = type;
                        currentCode = [];
                    }
                    
                    // A√±adir esta l√≠nea al c√≥digo actual
                    currentCode.push(text);
                }
                
                // No olvidar guardar el √∫ltimo bloque
                if (currentType === 'PACKAGE') {
                    specCode = currentCode.join('');
                } else if (currentType === 'PACKAGE BODY') {
                    bodyCode = currentCode.join('');
                }
                
                // Combinar el c√≥digo completo
                if (specCode) {
                    dbCode += specCode;
                }
                
                if (bodyCode) {
                    if (specCode) {
                        // Si hay tanto spec como body, a√±adir un separador claro
                        dbCode += "\n\n-- PACKAGE BODY --\n\n";
                    }
                    dbCode += bodyCode;
                }
            }
        } else {
            // Para otros tipos de objetos (no package)
            const result = await connection.execute(
                `SELECT TEXT
                 FROM ALL_SOURCE 
                 WHERE OWNER = :schema 
                 AND NAME = :objectName 
                 AND TYPE = :objectType
                 ORDER BY LINE`,
                { schema, objectName, objectType },
                { fetchInfo: { TEXT: { type: oracledb.STRING } } }
            );

            if (result.rows.length > 0) {
                dbCode = result.rows.map(row => row[0]).join('');
            }
        }

        // Si no se encuentra c√≥digo en la base de datos
        if (!dbCode) {
            event.reply('compare-response', `Error: No se encontr√≥ el objeto ${objectType} ${schema}.${objectName} en la base de datos.`);
            await connection.close();
            return;
        }

        // Normalizar saltos de l√≠nea para consistencia entre diferentes sistemas (Windows, Unix)
        dbCode = dbCode.replace(/\r\n/g, '\n').replace(/\r/g, '\n');
        fileContent = fileContent.replace(/\r\n/g, '\n').replace(/\r/g, '\n');

        // Comparar el c√≥digo de la BD con el archivo usando diff con opciones precisas
        const differences = diffLines(dbCode, fileContent, {
            ignoreWhitespace: false,
            newlineIsToken: true
        });

        // Verificar si hay diferencias
        const hasDifferences = differences.some(part => part.added || part.removed);
        
        // Preparar respuesta con toda la informaci√≥n necesaria para la vista lado a lado
        const response = JSON.stringify({
            dbCode,
            fileContent,
            differences,
            hasDifferences,
            specCodePresent: !!specCode,
            bodyCodePresent: !!bodyCode
        });

        event.reply('compare-response', response);
        await connection.close();
    } catch (error) {
        console.error(error);
        event.reply('compare-response', `Error: ${error.message}`);
    }
});

================
File: package.json
================
{
  "name": "control-de-pases-app",
  "version": "1.0.0",
  "main": "main.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1",
    "start": "electron ."
  },
  "keywords": [],
  "author": "",
  "license": "ISC",
  "description": "",
  "dependencies": {
    "diff": "^7.0.0",
    "dotenv": "^16.4.7",
    "electron": "^35.1.2",
    "oracledb": "^6.8.0",
    "repomix": "^0.3.1"
  }
}

================
File: renderer.js
================
const { ipcRenderer } = require('electron');

document.getElementById('login-form').addEventListener('submit', async (e) => {
    e.preventDefault();
    
    const selectedConnection = document.getElementById('connectionSelect').value;
    const username = document.getElementById('username').value;
    const password = document.getElementById('password').value;
    
    // Mostrar mensaje de carga
    const messageElement = document.getElementById('message');
    messageElement.textContent = 'Conectando...';
    messageElement.className = 'notification';
    
    // Deshabilitar el bot√≥n de env√≠o mientras se procesa
    const submitButton = e.target.querySelector('button');
    submitButton.disabled = true;

    ipcRenderer.send('login-attempt', { username, password, selectedConnection });
});

ipcRenderer.on('login-response', (event, message) => {
    const messageElement = document.getElementById('message');
    const submitButton = document.querySelector('button[type="submit"]');
    
    // Habilitar el bot√≥n nuevamente
    submitButton.disabled = false;
    
    if (message.startsWith('Conexi√≥n exitosa')) {
        messageElement.textContent = message;
        messageElement.className = 'notification success-message';
        
        // Redireccionar despu√©s de un breve retraso para que el usuario vea el mensaje
        setTimeout(() => {
            window.location.href = 'compare.html';
        }, 1000);
    } else {
        messageElement.textContent = message;
        messageElement.className = 'notification error-message';
    }
});

================
File: styles/styles-compare.css
================
.package-info {
    background-color: #e7f3fe;
    border-left: 4px solid #2196F3;
    padding: 0.5rem;
    margin-bottom: 0.5rem;
    font-size: 0.9rem;
    color: #0c5460;
    border-radius: 4px;
}/* styles-compare.css - Estilos para la p√°gina de comparaci√≥n */

body {
    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    background-color: #f7f9fc;
    margin: 0;
    padding: 0.8rem;
    color: #2c3e50;
    overflow-x: hidden;
}

h2 {
    color: #2c3e50;
    margin: 0.5rem 0;
    font-size: 1.3rem;
}

h3 {
    color: #2c3e50;
    margin: 0.3rem 0;
    font-size: 1.1rem;
}

.compare-container {
    background-color: white;
    border-radius: 8px;
    box-shadow: 0 2px 6px rgba(0, 0, 0, 0.1);
    padding: 1rem;
    margin-bottom: 1rem;
    display: flex;
    flex-wrap: wrap;
    align-items: flex-end;
}

.form-group {
    margin-bottom: 0.6rem;
    width: 24%;
    padding-right: 0.5rem;
    box-sizing: border-box;
}

label {
    display: block;
    font-size: 0.95rem;
    margin-bottom: 0.5rem;
    color: #566573;
}

input, select {
    width: 100%;
    padding: 0.6rem;
    border: 1px solid #dce4ec;
    border-radius: 4px;
    font-size: 0.9rem;
    margin-bottom: 0.5rem;
    box-sizing: border-box;
    transition: border-color 0.3s;
}

input:focus, select:focus {
    outline: none;
    border-color: #3498db;
    box-shadow: 0 0 0 2px rgba(52, 152, 219, 0.2);
}

button {
    background-color: #3498db;
    color: white;
    padding: 0.6rem 1.2rem;
    border: none;
    border-radius: 4px;
    cursor: pointer;
    font-size: 0.9rem;
    font-weight: 500;
    transition: background-color 0.3s;
    height: 38px;
}

button:hover {
    background-color: #2980b9;
}

/* Contenedor de resultados - NUEVO DISE√ëO LADO A LADO */
.result-container {
    background-color: white;
    border-radius: 8px;
    box-shadow: 0 2px 6px rgba(0, 0, 0, 0.1);
    padding: 1rem;
    height: calc(100vh - 200px);
    display: flex;
    flex-direction: column;
}

.result-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 0.5rem;
    border-bottom: 1px solid #eaecef;
    padding-bottom: 0.5rem;
}

.result-title {
    margin: 0;
}

.result-summary {
    color: #566573;
    font-size: 0.9rem;
    padding: 0.5rem 0;
    margin-bottom: 0.5rem;
}

.side-by-side {
    display: flex;
    flex-direction: row;
    gap: 1rem;
    flex: 1;
    overflow: hidden;
}

.code-panel {
    flex: 1;
    border: 1px solid #eaecef;
    border-radius: 4px;
    display: flex;
    flex-direction: column;
    overflow: hidden;
}

.panel-header {
    background-color: #f1f2f6;
    color: #2c3e50;
    padding: 0.8rem;
    font-weight: 600;
    border-bottom: 1px solid #eaecef;
    border-radius: 4px 4px 0 0;
}

.code-content {
    background-color: #f8f9fa;
    padding: 0.5rem;
    overflow-x: auto;
    font-family: 'Consolas', 'Monaco', monospace;
    font-size: 0.85rem;
    line-height: 1.4;
    white-space: pre;
    flex: 1;
    overflow-y: auto;
    tab-size: 4;
}

/* Estilos para las diferencias */
.added {
    color: #27ae60;
    background-color: #e8f5e9;
    display: block;
    padding: 2px 0;
}

.removed {
    color: #e74c3c;
    background-color: #ffebee;
    display: block;
    padding: 2px 0;
}

.unchanged {
    color: #2c3e50;
    background-color: transparent;
    display: block;
    padding: 2px 0;
}

.diff-marker {
    display: inline-block;
    width: 20px;
    text-align: center;
    margin-right: 5px;
    font-weight: bold;
}

.line-number {
    display: inline-block;
    min-width: 30px;
    text-align: right;
    padding-right: 10px;
    color: #8e9aa9;
    user-select: none;
}

/* Loader para operaciones as√≠ncronas */
.loader {
    display: none;
    margin: 1rem auto;
    border: 5px solid #f3f3f3;
    border-radius: 50%;
    border-top: 5px solid #3498db;
    width: 30px;
    height: 30px;
    animation: spin 1s linear infinite;
}

@keyframes spin {
    0% { transform: rotate(0deg); }
    100% { transform: rotate(360deg); }
}

/* Mensajes de notificaci√≥n */
.notification {
    padding: 1rem;
    margin: 1rem 0;
    border-radius: 4px;
    text-align: center;
}

.success {
    background-color: #d4edda;
    color: #155724;
    border: 1px solid #c3e6cb;
}

.error {
    background-color: #f8d7da;
    color: #721c24;
    border: 1px solid #f5c6cb;
}

/* Control de diferencias */
.diff-controls {
    display: flex;
    align-items: center;
    justify-content: flex-end;
    gap: 1rem;
    margin-bottom: 1rem;
}

.diff-toggle {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    font-size: 0.9rem;
    color: #566573;
}

.diff-toggle input {
    margin: 0;
    width: auto;
}

/* Responsive design */
@media (max-width: 1100px) {
    .form-group {
        width: 49%;
    }
}

@media (max-width: 768px) {
    .side-by-side {
        flex-direction: column;
    }
    
    .code-panel {
        flex: none;
        width: 100%;
        margin-bottom: 1rem;
    }
    
    .form-group {
        width: 100%;
        display: block;
    }
}

================
File: styles/styles-login.css
================
/* styles-login.css - Estilos para la p√°gina de login */

body {
    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    background-color: #f7f9fc;
    margin: 0;
    padding: 0;
    display: flex;
    justify-content: center;
    align-items: center;
    height: 100vh;
}

.login-container {
    background-color: white;
    border-radius: 8px;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
    padding: 2.5rem;
    width: 100%;
    max-width: 400px;
}

h2 {
    color: #2c3e50;
    text-align: center;
    margin-bottom: 1.5rem;
    font-weight: 600;
}

form {
    display: flex;
    flex-direction: column;
}

label {
    font-size: 0.9rem;
    margin-bottom: 0.5rem;
    color: #566573;
}

input, select {
    margin-bottom: 1.2rem;
    padding: 0.8rem;
    border: 1px solid #dce4ec;
    border-radius: 4px;
    font-size: 1rem;
    transition: border-color 0.3s;
}

input:focus, select:focus {
    outline: none;
    border-color: #3498db;
    box-shadow: 0 0 0 2px rgba(52, 152, 219, 0.2);
}

button {
    background-color: #3498db;
    color: white;
    padding: 0.8rem;
    border: none;
    border-radius: 4px;
    cursor: pointer;
    font-size: 1rem;
    font-weight: 500;
    transition: background-color 0.3s;
}

button:hover {
    background-color: #2980b9;
}

.error-message {
    color: #e74c3c;
    font-size: 0.85rem;
    margin-top: 1rem;
    text-align: center;
}

.success-message {
    color: #27ae60;
    font-size: 0.85rem;
    margin-top: 1rem;
    text-align: center;
}

/* Animaci√≥n para mensajes de notificaci√≥n */
@keyframes fadeIn {
    from { opacity: 0; transform: translateY(-10px); }
    to { opacity: 1; transform: translateY(0); }
}

.notification {
    animation: fadeIn 0.3s ease-out;
}
